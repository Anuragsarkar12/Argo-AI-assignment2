import streamlit as st
import requests
from PIL import Image
import io

# Set up the page configuration
st.set_page_config(page_title="Image Description with BLIP", layout="centered")

# Title and description
st.title("Image Description with BLIP")
st.write("Upload an image to get a description generated by BLIP!")

# File uploader for image input
uploaded_file = st.file_uploader("Choose an image", type=["png", "jpg", "jpeg"])

# Maximum file size in MB
MAX_FILE_SIZE_MB = 5

# Function to check the file size
def is_file_size_valid(file):
    file_size = len(file.getvalue()) / (1024 * 1024)  # size in MB
    return file_size <= MAX_FILE_SIZE_MB

# Function to send the image to the FastAPI backend
def get_image_description(image_data):
    url = "http://127.0.0.1:8000/predict"  # Replace with production URL when deployed
    try:
        # Set a timeout for the request to avoid hanging indefinitely
        response = requests.post(url, files={"file": image_data}, timeout=30)

        # Check if the response is successful
        if response.status_code == 200:
            caption = response.json().get("description", "No description found.")
            return caption
        else:
            return "Error: Unable to process the image. Please try again later."
    except requests.exceptions.Timeout:
        return "Error: Request timed out. Please try again later."
    except requests.exceptions.RequestException as e:
        return f"Error: {e}"

# Display the uploaded image
if uploaded_file is not None:

    # Check if the file size is within the limit
    if not is_file_size_valid(uploaded_file):
        st.warning(f"File is too large! Please upload a file smaller than {MAX_FILE_SIZE_MB}MB.")
    else:
        image = Image.open(uploaded_file)
        st.image(image, caption="Uploaded Image", use_column_width=True)

        # When the user clicks the "Generate Description" button
        if st.button("Generate Description"):
            with st.spinner("Generating description..."):
                # Convert the uploaded image to byte array
                img_byte_arr = io.BytesIO()
                image.save(img_byte_arr, format='PNG')
                img_byte_arr = img_byte_arr.getvalue()

                # Get the description from the API
                caption = get_image_description(img_byte_arr)

                # Display the result
                st.write(f"**Description:** {caption}")
